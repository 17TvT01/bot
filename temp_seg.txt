            return []
    
    def get_smart_suggestions(self) -> List[str]:
        """Get smart suggestions based on current context."""
        # Kiểm tra xem dữ liệu đã được tải đầy đủ chưa
        if not self._data_loaded:
            # Trả về các gợi ý mặc định nếu dữ liệu chưa được tải
            return ["Kiểm tra thời tiết", "Sử dụng máy tính", "Kiểm tra thông tin hệ thống"]
            
        try:
            suggestions = []
            current_time = datetime.datetime.now()
            current_hour = current_time.hour
            
            # Time-based suggestions
            if 6 <= current_hour < 9:
                suggestions.append("Kiểm tra lịch trình ngày hôm nay")
            elif 11 <= current_hour < 13:
                suggestions.append("Đặt báo thức cho buổi chiều")
            elif 16 <= current_hour < 18:
                suggestions.append("Xem thời tiết ngày mai")
            
            # Based on recent usage patterns
            recent_commands = [cmd['command'] for cmd in self.user_data.get('command_history', [])[-10:] if cmd['success']]
            
            # Weather-related suggestions
            if any("thời tiết" in cmd.lower() for cmd in recent_commands):
                suggestions.append("Theo dõi thời tiết hàng ngày")
            
            # Calculator-related suggestions
            if any(word in " ".join(recent_commands).lower() for word in ["tính", "cộng", "trừ", "nhân", "chia"]):
                suggestions.append("Sử dụng máy tính để tính toán nhanh")
            
            # System info suggestions
            if any(word in " ".join(recent_commands).lower() for word in ["hệ thống", "thông tin", "máy tính"]):
                suggestions.append("Kiểm tra thông tin hệ thống")
            
            return suggestions[:3]  # Limit to 3 most relevant suggestions
        except Exception as e:
            print(f"DEBUG: Error in get_smart_suggestions: {e}")
            return ["Kiểm tra thời tiết", "Sử dụng máy tính", "Kiểm tra thông tin hệ thống"]
    
    def learn_preference(self, feature: str, preference: str, value: any):
        """Learn user preferences for specific features."""
        if 'preferences' not in self.user_data:
            self.user_data['preferences'] = {}
        if feature not in self.user_data['preferences']:
            self.user_data['preferences'][feature] = {}
        self.user_data['preferences'][feature][preference] = value
        self._save_data()
    
    def get_preference(self, feature: str, preference: str, default: any = None) -> any:
        """Get user preference for a specific feature."""
        return self.user_data.get('preferences', {}).get(feature, {}).get(preference, default)

